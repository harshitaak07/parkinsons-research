# -*- coding: utf-8 -*-
"""cog2-encoder (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15x4b31OlL1xsKODb4w91TVdZP-r4eat6
"""



import pandas as pd
import numpy as np
import os

"""Early Stage
DIFFAFFAIRS (3.89)

DIFFCONS (3.91)

DIFFFAMILIAR (3.96)

Mid Stage
DIFFTOPIC (3.67)

DIFFREM (3.71)

DIFFAPPT (3.55)

Late Stage
DIFFSWITCH (3.66)

DIFFKEPT (3.65)

DIFFRECENT (3.44)
"""

df_pyarrow1 = pd.read_parquet('merged_df.parquet', engine='pyarrow')
print(df_pyarrow1['EVENT_ID'].head())
print(df_pyarrow1['EVENT_ID'].isnull().sum())

print(df_pyarrow1[['PATNO', 'EVENT_ID']].isnull().sum())

# List of columns to keep
keep_cols = [
     'PATNO', 'EVENT_ID', 'PTCGBOTH', 'COGDECLN', 'FNCDTCOG', 'COGSTATE', 'COGDXCL', 'RVWNPSY', 'COGCAT',
    'NQCOG22R', 'NQCOG24R', 'NQCOG25R', 'NQCOG40R',
    'NQCOG01', 'NQCOG04', 'NQCOG08', 'NQCOG10', 'NQCOG11','visit_phase'
]

# Keep only these columns in the DataFrame
df_pyarrow1 = df_pyarrow1[keep_cols]

symptom_cols_cog2 = [col for col in df_pyarrow1.columns if col not in ['PATNO', 'visit_phase']]
for col in symptom_cols_cog2:
    df_pyarrow1[col] = pd.to_numeric(df_pyarrow1[col], errors='coerce')


# Now group and calculate mean prevalence by 'stage'
prevalence = (
    df_pyarrow1.groupby('visit_phase')[symptom_cols_cog2]
    .mean()
    .transpose()
)


# prevalence will be a DataFrame: rows = symptoms, columns = stages; values = mean presence (proportion)
print("Symptom prevalence by stage:")
print(prevalence)

# To identify symptoms with notable stage-specific variation
# e.g., difference from early to late
prevalence['diff_late_early'] = prevalence['late'] - prevalence['early']
prevalence['max_diff'] = prevalence.max(axis=1) - prevalence.min(axis=1)

# Sort symptoms by largest change across stages
notable_symptoms = prevalence.sort_values(by='max_diff', ascending=False)

print("Symptoms sorted by greatest change across stages:")
print(notable_symptoms)

# If needed, drop or ignore non-symptom rows
symptom_rows = [ix for ix in prevalence.index if ix not in ['EVENT_ID', 'COGCAT_TEXT']]
prevalence_symptoms = prevalence.loc[symptom_rows, ['early', 'mid', 'late']]

# Find top 2 symptoms for each stage
top_symptoms_per_stage = {}
for stage in ['early', 'mid', 'late']:
    top_symptoms = prevalence_symptoms[stage].nlargest(2).index.tolist()
    top_symptoms_per_stage[stage] = top_symptoms

print("Top 2 symptoms by stage:", top_symptoms_per_stage)

# Convert to str for grouping
selected_symptoms = list(set(sum(top_symptoms_per_stage.values(), [])))
print("Unique top symptoms overall:", selected_symptoms)

# Use only these for encoder input preparation
df_pyarrow1['PATNO'] = df_pyarrow1['PATNO'].astype(str)
df_pyarrow1['visit_phase'] = df_pyarrow1['visit_phase'].astype(str)

df_pyarrow1agg = df_pyarrow1.groupby(['PATNO', 'visit_phase'])[selected_symptoms].mean().reset_index()

pivoted = {
    symptom: df_pyarrow1agg.pivot(index='PATNO', columns='visit_phase', values=symptom).fillna(0)
    for symptom in selected_symptoms
}

arrays = [pivoted[s].to_numpy() for s in selected_symptoms]
autoencoder_input_cog = np.stack(arrays, axis=2)

print(autoencoder_input_cog.shape)
df_pyarrow1['PATNO'] = df_pyarrow1['PATNO'].astype(str)
df_pyarrow1['visit_phase'] = df_pyarrow1['visit_phase'].astype(str)

# Aggregate by patient and visit_phase
df_pyarrow1agg = df_pyarrow1.groupby(['PATNO', 'visit_phase'])[selected_symptoms].mean().reset_index()

# Pivot each symptom with visit_phase as columns
pivoted = {
    symptom: df_pyarrow1agg.pivot(index='PATNO', columns='visit_phase', values=symptom).fillna(0)
    for symptom in selected_symptoms
}

# Stack into 3D array: patients x stages x symptoms
arrays = [pivoted[s].to_numpy() for s in selected_symptoms]
autoencoder_input_cog1 = np.stack(arrays, axis=2)

np.save('autoencoder_input_cog2.npy', autoencoder_input_cog1)

