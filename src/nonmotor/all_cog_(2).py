# -*- coding: utf-8 -*-
"""all cog (2).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/182R3oDRkxP0rZS2rjRTUpqPMYnkYfjpB
"""

import pandas as pd
import matplotlib.pyplot as plt


# Load data
filterdata = pd.read_csv(r"E:\pd-data\enrollment\filterdata.csv", low_memory=False)
pdaq = pd.read_csv(r"E:\pd-data\non motor\cog modified\PDAQ-27_11Sep2025.csv")

# Convert to string to ensure consistent key types
filterdata['PATNO'] = filterdata['PATNO'].astype(str)
filterdata['EVENT_ID'] = filterdata['EVENT_ID'].astype(str)

pdaq['PATNO'] = pdaq['PATNO'].astype(str)
pdaq['EVENT_ID'] = pdaq['EVENT_ID'].astype(str)

# Merge on common columns
cog = pd.merge(filterdata, pdaq, on=['PATNO', 'EVENT_ID'], how='inner')


print(f"Merged dataframe shape: {cog.shape}")

cols = [
    'DIFFNEWS', 'DIFFTIME', 'DIFFMONEY', 'DIFFINST', 'DIFFPROBLEM', 'DIFFSTEPS',
    'DIFFERRAND', 'DIFFMAP', 'DIFFINFO', 'DIFFMORE', 'DIFFGADGET', 'DIFFAFFAIRS',
    'DIFFTHOUGHT', 'DIFFDISC', 'DIFFREM', 'DIFFCONS', 'DIFFTOPIC', 'DIFFWORD',
    'DIFFORG', 'DIFFTASK', 'DIFFSWITCH', 'DIFFAPPT', 'DIFFRECALL', 'DIFFRECENT',
    'DIFFKEPT', 'DIFFNAME', 'DIFFFAMILIAR'
]

for c in cols:
    cog[c] = pd.to_numeric(cog[c], errors='coerce').fillna(0).astype(int)

import pandas as pd

# Load the participant status file
df_cohort_full = pd.read_csv(r"E:\pd-data\enrollment\Participant_Status_16Sep2025.csv")

# Print columns to identify the correct cohort column name
print(df_cohort_full.columns)

# Replace 'COHORT' with the actual cohort column from above!
df_cohort = df_cohort_full[['PATNO', 'COHORT']].copy()

print(df_cohort.head())

# Ensure PATNO is string in both DataFrames
df_cohort['PATNO'] = df_cohort['PATNO'].astype(str)
df_cohort['COHORT'] = df_cohort['COHORT'].astype(str)
cog['PATNO'] = cog['PATNO'].astype(str)

df_cohort['COHORT'] = df_cohort['COHORT'].str.strip()
df_cohort['PATNO'] = df_cohort['PATNO'].str.strip()
pd_patnos = set(df_cohort[df_cohort['COHORT'] == '1']['PATNO'])
cog = cog[cog['PATNO'].isin(pd_patnos)]
print(pd_patnos)

symptom_cols = cols
visit_order = sorted(cog['EVENT_ID'].unique())
means = cog.groupby('EVENT_ID')[symptom_cols].mean().loc[visit_order]
peaks = means.idxmax()
peak_values = means.max()

# Summary DataFrame with symptom, peak visit, and peak value
summary = pd.DataFrame({
    'Symptom': symptom_cols,
    'Peak Visit': peaks.values,
    'Peak Value': peak_values.values
})

print(summary)

# Ensure PATNO and EVENT_ID are strings
cog['PATNO'] = cog['PATNO'].astype(str)
cog['EVENT_ID'] = cog['EVENT_ID'].astype(str)

# Get the visit sequences per patient in filterdata
visit_sequences = filterdata.groupby('PATNO')['EVENT_ID'].apply(list)

positions = {}
for visits in visit_sequences:
    for pos, eid in enumerate(visits, 1):
        if eid not in positions:
            positions[eid] = []
        positions[eid].append(pos)

# Average position per EVENT_ID
mean_positions = {eid: sum(pos_list) / len(pos_list) for eid, pos_list in positions.items()}

# Sort EVENT_IDs by mean position
sorted_eids = sorted(mean_positions, key=mean_positions.get)
n = len(sorted_eids)

# Assign early, mid, late categories
visit_categories = {}
for i, eid in enumerate(sorted_eids):
    if i < n // 3:
        visit_categories[eid] = 'early'
    elif i < 2 * n // 3:
        visit_categories[eid] = 'mid'
    else:
        visit_categories[eid] = 'late'

# Map these categories to a new column in filterdata
cog['visit_phase'] = cog['EVENT_ID'].map(visit_categories)

print(cog[['EVENT_ID', 'visit_phase']].drop_duplicates())

print(cog[['PATNO', 'EVENT_ID']].isnull().sum())

symptom_cols = [
    'DIFFNEWS', 'DIFFTIME', 'DIFFMONEY', 'DIFFINST', 'DIFFPROBLEM', 'DIFFSTEPS',
    'DIFFERRAND', 'DIFFMAP', 'DIFFINFO', 'DIFFMORE', 'DIFFGADGET', 'DIFFAFFAIRS',
    'DIFFTHOUGHT', 'DIFFDISC', 'DIFFREM', 'DIFFCONS', 'DIFFTOPIC', 'DIFFWORD',
    'DIFFORG', 'DIFFTASK', 'DIFFSWITCH', 'DIFFAPPT', 'DIFFRECALL', 'DIFFRECENT',
    'DIFFKEPT', 'DIFFNAME', 'DIFFFAMILIAR'
]
visit_phase_mapping = {
    'BL': 'early', 'R17': 'early', 'R18': 'mid', 'SC': 'early', 'TRANS': 'mid',
    'V01': 'mid', 'V02': 'mid', 'V03': 'mid', 'V04': 'mid', 'V05': 'mid',
    'V06': 'mid', 'V07': 'late', 'V08': 'late', 'V09': 'late', 'V10': 'late',
    'V11': 'late', 'V12': 'late', 'V14': 'late', 'V15': 'late', 'V17': 'late',
    'V18': 'late', 'R19': 'mid', 'R20': 'mid', 'V19': 'late', 'V20': 'late',
    'ST': 'mid', 'V13': 'late', 'V21': 'late', 'R16': 'early', 'V16': 'late',
    'R15': 'early', 'PW': 'early', 'RS1': 'mid', 'R21': 'mid', 'U02': 'mid',
    'U01': 'mid', 'V22': 'late', 'R14': 'mid', 'R13': 'early', 'LOG': 'early',
    'R08': 'early', 'R10': 'early', 'R12': 'early', 'R06': 'early', 'R04': 'early',
    'R01': 'early'
}

# 3. Calculate mean symptom scores per visit
mean_scores = cog.groupby('EVENT_ID')[symptom_cols].mean()
filtered_visit_order = [v for v in visit_phase_mapping.keys() if v in mean_scores.index]
mean_scores = mean_scores.loc[filtered_visit_order]

# 4. Assign phase to each symptom based on the visit where it is strongest
symptom_phase_map = {}
for col in symptom_cols:
    max_score = mean_scores[col].max()
    max_visits = mean_scores.index[mean_scores[col] == max_score]
    # Gather all possible phases for ties, then use priority: early > mid > late
    phases = {visit_phase_mapping.get(visit, 'unknown') for visit in max_visits}
    if 'early' in phases:
        phase = 'early'
    elif 'mid' in phases:
        phase = 'mid'
    elif 'late' in phases:
        phase = 'late'
    else:
        phase = 'unknown'
    symptom_phase_map[col] = phase

# 5. Plot with improved legend labels
plt.figure(figsize=(13, 7))
for col in symptom_cols:
    label = f"{col}: {symptom_phase_map[col].capitalize()}"
    plt.plot(mean_scores.index, mean_scores[col], marker='o', linewidth=2, label=label)

plt.ylabel('Symptom Severity or Presence (mean)', fontsize=14)
plt.xlabel('Visit (EVENT_ID)', fontsize=14)
plt.title('Symptom Progression Over Visits', fontsize=16)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.legend(loc='upper left', bbox_to_anchor=(1.0, 1.0), fontsize=10, ncol=2)
plt.tight_layout()
plt.show()

import os
cog['EVENT_ID'] = cog['EVENT_ID'].astype(str)
cog.to_parquet('cog.parquet', engine='pyarrow', index=False)

import pyarrow.parquet as pq
table = pq.read_table('cog.parquet')
print(table.schema)

print(cog[['PATNO', 'EVENT_ID']].isnull().sum())

file_paths = [
    r'E:\pd-data\non motor\cog modified\Cognitive_Categorization_11Sep2025.csv',
    r'E:\pd-data\non motor\cog modified\Neuro_QoL__Cognition_Function_-_Short_Form_11Sep2025.csv',
    r'E:\pd-data\non motor\cog modified\Neuro_QoL__Communication_-_Short_Form_11Sep2025.csv'
]

selected_cols_file1 = ['PATNO', 'EVENT_ID', 'PTCGBOTH',	'COGDECLN','FNCDTCOG','COGSTATE','COGDXCL','RVWNPSY','COGCAT','COGCAT_TEXT']
selected_cols_file2 = ['PATNO','EVENT_ID','NQCOG22R','NQCOG24R','NQCOG25R','NQCOG40R']
selected_cols_file3 = ['PATNO','EVENT_ID','NQCOG01','NQCOG04','NQCOG08','NQCOG10','NQCOG11']

# Load and reduce each file
cogcat_df = pd.read_csv(file_paths[0])[selected_cols_file1]
neuro_df = pd.read_csv(file_paths[1])[selected_cols_file2]
neurocom_df = pd.read_csv(file_paths[2])[selected_cols_file3]

# Merge on patient_id and EVENT_ID (inner join keeps only matching values)
merged_df = cogcat_df.merge(neuro_df, on=['PATNO', 'EVENT_ID'], how='inner')
merged_df = merged_df.merge(neurocom_df, on=['PATNO', 'EVENT_ID'], how='inner')

# Now merged_df contains only selected columns from all three files
print(merged_df.head())

# Ensure PATNO and EVENT_ID are strings
merged_df['PATNO'] = merged_df['PATNO'].astype(str)
merged_df['EVENT_ID'] = merged_df['EVENT_ID'].astype(str)

# Get the visit sequences per patient in filterdata
visit_sequences = merged_df.groupby('PATNO')['EVENT_ID'].apply(list)

positions = {}
for visits in visit_sequences:
    for pos, eid in enumerate(visits, 1):
        if eid not in positions:
            positions[eid] = []
        positions[eid].append(pos)

# Average position per EVENT_ID
mean_positions = {eid: sum(pos_list) / len(pos_list) for eid, pos_list in positions.items()}

# Sort EVENT_IDs by mean position
sorted_eids = sorted(mean_positions, key=mean_positions.get)
n = len(sorted_eids)

# Assign early, mid, late categories
visit_categories = {}
for i, eid in enumerate(sorted_eids):
    if i < n // 3:
        visit_categories[eid] = 'early'
    elif i < 2 * n // 3:
        visit_categories[eid] = 'mid'
    else:
        visit_categories[eid] = 'late'

# Map these categories to a new column in filterdata
merged_df['visit_phase'] = merged_df['EVENT_ID'].map(visit_categories)

print(merged_df[['EVENT_ID', 'visit_phase']].drop_duplicates())

# Ensure PATNO is string in both DataFrames
df_cohort['PATNO'] = df_cohort['PATNO'].astype(str)
df_cohort['COHORT'] = df_cohort['COHORT'].astype(str)
merged_df['PATNO'] = merged_df['PATNO'].astype(str)

df_cohort['COHORT'] = df_cohort['COHORT'].str.strip()
df_cohort['PATNO'] = df_cohort['PATNO'].str.strip()
pd_patnos = set(df_cohort[df_cohort['COHORT'] == '1']['PATNO'])
merged_df = merged_df[merged_df['PATNO'].isin(pd_patnos)]
print(pd_patnos)

import pandas as pd
import matplotlib.pyplot as plt

# Select all symptom columns from your merged_df except ID columns
symptom_cols = [
    'PTCGBOTH', 'COGDECLN', 'FNCDTCOG', 'COGSTATE', 'COGDXCL', 'RVWNPSY', 'COGCAT',
    'NQCOG22R', 'NQCOG24R', 'NQCOG25R', 'NQCOG40R',
    'NQCOG01', 'NQCOG04', 'NQCOG08', 'NQCOG10', 'NQCOG11'
]
symptom_cols = [col for col in symptom_cols if col in merged_df.columns]

# Convert these columns to numeric
for col in symptom_cols:
    merged_df[col] = pd.to_numeric(merged_df[col], errors='coerce')

# Define visit_phase_mapping as before if you're grouping by visit code phases
visit_phase_mapping = {
    'BL': 'early', 'R17': 'early', 'R18': 'mid', 'SC': 'early', 'TRANS': 'mid',
    'V01': 'mid', 'V02': 'mid', 'V03': 'mid', 'V04': 'mid', 'V05': 'mid',
    'V06': 'mid', 'V07': 'late', 'V08': 'late', 'V09': 'late', 'V10': 'late',
    'V11': 'late', 'V12': 'late', 'V14': 'late', 'V15': 'late', 'V17': 'late',
    'V18': 'late', 'R19': 'mid', 'R20': 'mid', 'V19': 'late', 'V20': 'late',
    'ST': 'mid', 'V13': 'late', 'V21': 'late', 'R16': 'early', 'V16': 'late',
    'R15': 'early', 'PW': 'early', 'RS1': 'mid', 'R21': 'mid', 'U02': 'mid',
    'U01': 'mid', 'V22': 'late', 'R14': 'mid', 'R13': 'early', 'LOG': 'early',
    'R08': 'early', 'R10': 'early', 'R12': 'early', 'R06': 'early', 'R04': 'early',
    'R01': 'early'
}

# Calculate mean symptom scores per visit
mean_scores = merged_df.groupby('EVENT_ID')[symptom_cols].mean()
filtered_visit_order = [v for v in visit_phase_mapping.keys() if v in mean_scores.index]
mean_scores = mean_scores.loc[filtered_visit_order]

# Assign phase to each symptom based on peak visit
symptom_phase_map = {}
for col in symptom_cols:
    max_score = mean_scores[col].max()
    max_visits = mean_scores.index[mean_scores[col] == max_score]
    phases = {visit_phase_mapping.get(visit, 'unknown') for visit in max_visits}
    if 'early' in phases:
        phase = 'early'
    elif 'mid' in phases:
        phase = 'mid'
    elif 'late' in phases:
        phase = 'late'
    else:
        phase = 'unknown'
    symptom_phase_map[col] = phase

# Plot with improved legend labels
plt.figure(figsize=(13, 7))
for col in symptom_cols:
    label = f"{col}: {symptom_phase_map[col].capitalize()}"
    plt.plot(mean_scores.index, mean_scores[col], marker='o', linewidth=2, label=label)

plt.ylabel('Symptom Severity or Presence (mean)', fontsize=14)
plt.xlabel('Visit (EVENT_ID)', fontsize=14)
plt.title('Symptom Progression Over Visits', fontsize=16)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.xticks(fontsize=12)
plt.yticks(fontsize=12)
plt.legend(loc='upper left', bbox_to_anchor=(1.0, 1.0), fontsize=10, ncol=2)
plt.tight_layout()
plt.show()

"""Participant and Informant Both Assessed
Cognitive Decline Noted
Functional Decline Due to Cognition
Cognitive State
Clinical Cognitive Diagnosis
Review of Neuropsych Tests
Cognitive Category Code
Item 22 Reversed - Trouble Concentrating
Item 24 Reversed - Trouble Remembering
Item 25 Reversed - Trouble Multitasking
Item 40 Reversed - Trouble Planning
Item 1 - Trouble Being Understood
Item 4 - Trouble Expressing Thoughts
Item 8 - Trouble Participating in Conversations
Item 10 - Trouble Finding Words
Item 11 - Trouble Communicating Needs

"""

import os
merged_df['EVENT_ID'] = merged_df['EVENT_ID'].astype(str)
merged_df.to_parquet('merged_df.parquet', engine='pyarrow', index=False)

print(merged_df[['PATNO', 'EVENT_ID']].isnull().sum())

