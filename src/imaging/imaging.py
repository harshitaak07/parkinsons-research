# -*- coding: utf-8 -*-
"""imaging.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bureMdGMupqg4bihcgoMsY5aBAsRb8v6
"""

import pandas as pd

dti=pd.read_csv(r'E:\pd-data\imaging\DTI_Regions_of_Interest_13Oct2025.csv');

dti.head()

dti = dti.drop(['PAG_NAME', 'INFODT', 'RUNDATE'], axis=1)

dti.shape

import pandas as pd

# Load the participant status file
df_cohort_full = pd.read_csv(r"E:\pd-data\enrollment\Participant_Status_16Sep2025.csv")

# Print columns to identify the correct cohort column name
print(df_cohort_full.columns)

# Replace 'COHORT' with the actual cohort column from above!
df_cohort = df_cohort_full[['PATNO', 'COHORT']].copy()

print(df_cohort.head())

# Ensure PATNO is string in both DataFrames
df_cohort['PATNO'] = df_cohort['PATNO'].astype(str)
df_cohort['COHORT'] = df_cohort['COHORT'].astype(str)
dti['PATNO'] = dti['PATNO'].astype(str)

df_cohort['COHORT'] = df_cohort['COHORT'].str.strip()
df_cohort['PATNO'] = df_cohort['PATNO'].str.strip()
pd_patnos = set(df_cohort[df_cohort['COHORT'] == '1']['PATNO'])
dti = dti[dti['PATNO'].isin(pd_patnos)]
print(pd_patnos)



dti.head()

"""Axial Diffusivity (AD = E1) Decrease
– PD patients show lower E1 values in nigral ROIs compared to controls, indicating axonal injury and loss of oriented fiber tracts.
– Greater reduction in AD correlates with higher clinical motor scores on the Unified Parkinson’s Disease Rating Scale (UPDRS), reflecting worse symptom severity.​

Radial Diffusivity (RD = (E2 + E3)/2) Increase
– RD is elevated in PD patients’ substantia nigra, signifying demyelination or breakdown of tissue barriers perpendicular to fibers.
– Higher RD values associate with longer disease duration and more advanced Hoehn & Yahr stages, mapping to late-stage progression.​

Fractional Anisotropy (FA) Reduction
– Although derived from E1–E3, FA summarizes anisotropy. PD research consistently reports lower FA in SN ROIs, reflecting overall loss of tissue organization. FA inversely correlates with UPDRS motor scores and cognitive decline.​

Mean Diffusivity (MD) Increase
– MD = (E1 + E2 + E3)/3 is higher in PD, indicating increased extracellular space from neuronal loss. MD rises with disease severity and tremor‐dominant phenotypes.​

Regional Patterns
– Early‐stage PD: Changes confined to rostral SN (ROI1–ROI3).
– Mid‐stage: Alterations extend to caudal SN (ROI4–ROI6).
– Late‐stage: Widespread SN changes plus mild involvement of reference regions (REF1/REF2), aligning with symptom progression from unilateral to bilateral motor signs.​

In summary, literature determines “severity” by measuring:

Decreased E1 (axial diffusivity)

Increased E2/E3 (radial diffusivity)

Lower FA and higher MD
"""

import numpy as np

def calculate_FA(E1, E2, E3):
    MD = (E1 + E2 + E3) / 3
    numerator = ((E1 - MD)**2 + (E2 - MD)**2 + (E3 - MD)**2) * 1.5
    denominator = (E1**2 + E2**2 + E3**2)
    FA = np.sqrt(numerator / denominator)
    return FA, MD

def calculate_severity(e1, e2, e3):
    AD = e1                  # Axial Diffusivity (E1)
    RD = (e2 + e3) / 2       # Radial Diffusivity (average of E2 and E3)
    FA, MD = calculate_FA(e1, e2, e3)  # Fractional Anisotropy and Mean Diffusivity

    # Combined severity metric consistent with literature findings:
    # Severity increases with lower AD, higher RD, lower FA, and higher MD
    severity = (1 / AD) + RD + (1 - FA) + MD
    return severity

def compute_severity_from_wide_format(df):
    patnos = df['PATNO'].unique()
    severity_results = []

    for patno in patnos:
        e1_row = df[(df['PATNO'] == patno) & (df['Measure'] == 'E1')]
        e2_row = df[(df['PATNO'] == patno) & (df['Measure'] == 'E2')]
        e3_row = df[(df['PATNO'] == patno) & (df['Measure'] == 'E3')]

        rois_early = ['ROI1', 'ROI2', 'ROI3']      # Rostral SN - early affected
        rois_mid = ['ROI4', 'ROI5', 'ROI6']        # Caudal SN - mid affected
        rois_late = ['REF1', 'REF2']                # Reference regions - late affected

        def avg_severity(rois):
            vals = [
                calculate_severity(e1_row[roi].values[0], e2_row[roi].values[0], e3_row[roi].values[0])
                for roi in rois
            ]
            return np.mean(vals)

        severity_early = avg_severity(rois_early)
        severity_mid = avg_severity(rois_mid)
        severity_late = avg_severity(rois_late)

        # Combine severities weighted (optionally tweak weights)
        combined_severity = (0.4 * severity_early) + (0.4 * severity_mid) + (0.2 * severity_late)

        severity_results.append({
            'PATNO': patno,
            'Severity_EarlySN': severity_early,
            'Severity_MidSN': severity_mid,
            'Severity_LateSN': severity_late,
            'Combined_Severity': combined_severity
        })

    severity_df = pd.DataFrame(severity_results)

    # Bin combined severity into 3 stages (early, mid, late)
    severity_df['Stage'] = pd.qcut(severity_df['Combined_Severity'], q=3, labels=['Early', 'Mid', 'Late'])

    return severity_df

# Usage:
severity_df = compute_severity_from_wide_format(dti)
print(severity_df.head(82))

# After running your severity_df = compute_severity_from_wide_format(dti)

# Prepare (num_patients, 3) severity vector
severity_vector = severity_df[['Severity_EarlySN', 'Severity_MidSN', 'Severity_LateSN']].values  # shape: (num_patients, 3)

# Optionally save for use in encoder
np.save('autoencoder_input_dti_severity.npy', severity_vector)

print(severity_vector.shape)
print(severity_vector[:5])  # Display first 5 patients' severity vectors

np.save('encoder_tensor_dti.npy', severity_vector)

"""lh_bankssts: left hemisphere banks of the superior temporal sulcus

lh_caudalanteriorcingulate: left hemisphere caudal anterior cingulate cortex

lh_caudalmiddlefrontal: left hemisphere caudal middle frontal gyrus

lh_cuneus: left hemisphere cuneus (occipital cortex region)

lh_entorhinal: left hemisphere entorhinal cortex

lh_fusiform: left hemisphere fusiform gyrus

lh_inferiorparietal: left hemisphere inferior parietal lobule

lh_inferiortemporal: left hemisphere inferior temporal gyrus

lh_isthmuscingulate: left hemisphere isthmus of the cingulate gyrus

lh_lateraloccipital: left hemisphere lateral occipital cortex

lh_lateralorbitofrontal: left hemisphere lateral orbitofrontal cortex

lh_lingual: left hemisphere lingual gyrus

lh_medialorbitofrontal: left hemisphere medial orbitofrontal cortex

lh_middletemporal: left hemisphere middle temporal gyrus

lh_parahippocampal: left hemisphere parahippocampal gyrus

lh_paracentral: left hemisphere paracentral lobule

lh_parsopercularis: left hemisphere pars opercularis (inferior frontal gyrus part)

lh_parsorbitalis: left hemisphere pars orbitalis (inferior frontal gyrus part)

lh_parstriangularis: left hemisphere pars triangularis (inferior frontal gyrus part)

lh_pericalcarine: left hemisphere pericalcarine cortex

lh_postcentral: left hemisphere postcentral gyrus (primary somatosensory cortex)

lh_posteriorcingulate: left hemisphere posterior cingulate cortex

lh_precentral: left hemisphere precentral gyrus (primary motor cortex)

lh_precuneus: left hemisphere precuneus

lh_rostralanteriorcingulate: left hemisphere rostral anterior cingulate cortex

lh_rostralmiddlefrontal: left hemisphere rostral middle frontal gyrus

lh_superiorfrontal: left hemisphere superior frontal gyrus

lh_superiorparietal: left hemisphere superior parietal lobule

lh_superiortemporal: left hemisphere superior temporal gyrus

lh_supramarginal: left hemisphere supramarginal gyrus

lh_frontalpole: left hemisphere frontal pole

lh_temporalpole: left hemisphere temporal pole

lh_transversetemporal: left hemisphere transverse temporal gyrus

lh_insula: left hemisphere insular cortex

lh_MeanThickness: mean cortical thickness of all regions in the left hemisphere

rh_bankssts: right hemisphere banks of the superior temporal sulcus

rh_caudalanteriorcingulate: right hemisphere caudal anterior cingulate cortex

rh_caudalmiddlefrontal: right hemisphere caudal middle frontal gyrus

rh_cuneus: right hemisphere cuneus

rh_entorhinal: right hemisphere entorhinal cortex

rh_fusiform: right hemisphere fusiform gyrus

rh_inferiorparietal: right hemisphere inferior parietal lobule

rh_inferiortemporal: right hemisphere inferior temporal gyrus

rh_isthmuscingulate: right hemisphere isthmus of cingulate gyrus

rh_lateraloccipital: right hemisphere lateral occipital cortex

rh_lateralorbitofrontal: right hemisphere lateral orbitofrontal cortex

rh_lingual: right hemisphere lingual gyrus

rh_medialorbitofrontal: right hemisphere medial orbitofrontal cortex

rh_middletemporal: right hemisphere middle temporal gyrus

rh_parahippocampal: right hemisphere parahippocampal gyrus

rh_paracentral: right hemisphere paracentral lobule

rh_parsopercularis: right hemisphere pars opercularis

rh_parsorbitalis: right hemisphere pars orbitalis

rh_parstriangularis: right hemisphere pars triangularis

rh_pericalcarine: right hemisphere pericalcarine cortex

rh_postcentral: right hemisphere postcentral gyrus

rh_posteriorcingulate: right hemisphere posterior cingulate cortex

rh_precentral: right hemisphere precentral gyrus

rh_precuneus: right hemisphere precuneus

rh_rostralanteriorcingulate: right hemisphere rostral anterior cingulate cortex

rh_rostralmiddlefrontal: right hemisphere rostral middle frontal gyrus

rh_superiorfrontal: right hemisphere superior frontal gyrus

rh_superiorparietal: right hemisphere superior parietal lobule

rh_superiortemporal: right hemisphere superior temporal gyrus

rh_supramarginal: right hemisphere supramarginal gyrus

rh_frontalpole: right hemisphere frontal pole

rh_temporalpole: right hemisphere temporal pole

rh_transversetemporal: right hemisphere transverse temporal gyrus

rh_insula: right hemisphere insular cortex

rh_MeanThickness: mean cortical thickness of all regions in the right hemisphere

Left_WM_hypointensities: hypointense white matter regions (left hemisphere)

Brain_Stem: brainstem volume

Left_non_WM_hypointensities: hypointense non-white-matter regions (left hemisphere)

Optic_Chiasm: optic chiasm volume

Right_WM_hypointensities: hypointense white matter regions (right hemisphere)

BrainSegVol: total brain segmentation volume (all parcellated regions)

Right_Lateral_Ventricle: right lateral ventricle volume

CC_Central: central corpus callosum volume

5th_Ventricle: fifth ventricle volume

Right_choroid_plexus: right choroid plexus volume

Right_Cerebellum_White_Matter: right cerebellar white matter

Left_vessel: vessel segmentation (left hemisphere)

Left_Cerebellum_Cortex: left cerebellar cortex

MaskVol_to_eTIV: ratio of brain mask volume to estimated total intracranial volume

MaskVol: brain mask volume

TotalGrayVol: total gray matter volume

Left_choroid_plexus: left choroid plexus volume

Right_Inf_Lat_Vent: right inferior lateral ventricle

Left_Pallidum: left globus pallidus

Left_Thalamus: left thalamus

Right_VentralDC: right ventral diencephalon

rhCortexVol: right hemisphere cortex volume

Right_non_WM_hypointensities: hypointense non-white-matter (right hemisphere)

BrainSegVol_to_eTIV: total brain segmentation volume to estimated total intracranial volume ratio

Right_Amygdala: right amygdala

Left_Amygdala: left amygdala

EstimatedTotalIntraCranialVol: estimated total intracranial volume (eTIV)

4th_Ventricle: fourth ventricle volume

Left_Inf_Lat_Vent: left inferior lateral ventricle

CortexVol: total cortical gray matter volume

Right_Pallidum: right globus pallidus

lhCortexVol: left hemisphere cortex volume

CC_Anterior: anterior corpus callosum volume

CC_Posterior: posterior corpus callosum volume

Left_Accumbens_area: left nucleus accumbens

Right_vessel: vessel segmentation (right hemisphere)

Right_Cerebellum_Cortex: right cerebellar cortex

Left_Putamen: left putamen

3rd_Ventricle: third ventricle volume

non_WM_hypointensities: hypointense non-white-matter (whole brain)

Right_Caudate: right caudate nucleus

CC_Mid_Posterior: mid-posterior corpus callosum

lhSurfaceHoles: surface holes (left hemisphere)

Left_Hippocampus: left hippocampus

Right_Hippocampus: right hippocampus

Left_Caudate: left caudate nucleus

rhCerebralWhiteMatterVol: right hemisphere cerebral white matter volume

Right_Putamen: right putamen

WM_hypointensities: hypointensities in white matter (whole brain)

Right_Accumbens_area: right nucleus accumbens

rhSurfaceHoles: surface holes (right hemisphere)

lhCerebralWhiteMatterVol: left hemisphere cerebral white matter volume

BrainSegVolNotVent: brain segmentation volume excluding ventricles

Left_Cerebellum_White_Matter: left cerebellum white matter

Left_VentralDC: left ventral diencephalon

SupraTentorialVolNotVent: supratentorial brain volume (excluding ventricles)

CC_Mid_Anterior: mid-anterior corpus callosum

SupraTentorialVol: supratentorial brain volume (whole region above tentorium)

SubCortGrayVol: subcortical gray matter volume

Right_Thalamus: right thalamus

Left_Lateral_Ventricle: left lateral ventricle

CSF: cerebrospinal fluid volume

SurfaceHoles: total surface topology holes

CerebralWhiteMatterVol: total cerebral white matter volume

cjv: coefficient of joint variation, a measure of image inhomogeneity between gray and white matter​

cnr: contrast-to-noise ratio, measures contrast separation between tissue types​

efc: entropy focus criterion, assesses image sharpness by measuring the image entropy​

fber: foreground-background energy ratio, quantifies the mean signal energy inside vs outside brain mask​

rpve_csf: relative partial volume error for CSF, error estimation for CSF segmentation​

rpve_gm: relative partial volume error for gray matter, error estimation for gray matter segmentation​

rpve_wm: relative partial volume error for white matter, error estimation for white matter segmentation​

fwhm_avg: average full width at half maximum, spatial smoothness across all directions​

fwhm_x: full width at half maximum in x (left-right) direction​

fwhm_y: full width at half maximum in y (anterior-posterior) direction​

fwhm_z: full width at half maximum in z (inferior-superior) direction​

summary_bg_k: background kurtosis, statistical measure of background voxel distribution​

summary_bg_mad: background median absolute deviation​

summary_bg_mean: background voxel mean intensity​

summary_bg_median: background voxel median intensity​

summary_bg_n: number of background voxels sampled​

summary_bg_p05: 5th percentile of background intensity distribution​

summary_bg_p95: 95th percentile of background intensity distribution​

summary_bg_stdv: standard deviation of background intensity​

summary_csf_k: kurtosis of CSF signal distribution​

summary_csf_mad: median absolute deviation of CSF signal intensity​

summary_csf_mean: mean CSF signal intensity​

summary_csf_median: median CSF signal intensity​

summary_csf_n: number of CSF voxels​

summary_csf_p05: 5th percentile CSF intensity​

summary_csf_p95: 95th percentile CSF intensity​

summary_csf_stdv: CSF signal intensity standard deviation​

summary_gm_k: kurtosis of gray matter signal distribution​

summary_gm_mad: median absolute deviation of gray matter intensity​

summary_gm_mean: mean gray matter signal intensity​

summary_gm_median: median gray matter signal intensity​

summary_gm_n: number of gray matter voxels​

summary_gm_p05: 5th percentile gray matter intensity​

summary_gm_p95: 95th percentile gray matter intensity​

summary_gm_stdv: gray matter intensity standard deviation​

summary_wm_k: kurtosis of white matter signal distribution​

summary_wm_mad: median absolute deviation of white matter intensity​

summary_wm_mean: mean white matter signal intensity​

summary_wm_median: median white matter signal intensity​

summary_wm_n: number of white matter voxels​

summary_wm_p05: 5th percentile white matter intensity​

summary_wm_p95: 95th percentile white matter intensity​

summary_wm_stdv: white matter intensity standard deviation​

icvs_csf: intracranial volume fraction of CSF​

icvs_gm: intracranial volume fraction of gray matter​

icvs_wm: intracranial volume fraction of white matter​

inu_med: median intensity non-uniformity (bias field)​

inu_range: range of intensity non-uniformity​

snr_csf: signal-to-noise ratio in CSF​

snr_gm: signal-to-noise ratio in gray matter​

snr_total: signal-to-noise ratio across whole image​

snr_wm: signal-to-noise ratio in white matter​

snrd_csf: Dietrich's signal-to-noise ratio in CSF​

snrd_gm: Dietrich's signal-to-noise ratio in gray matter​

snrd_total: Dietrich's signal-to-noise ratio total​

snrd_wm: Dietrich's signal-to-noise ratio in white matter

GM_VOLUME: Grey matter volume
"""

# Ensure PATNO is string in both DataFrames
df_cohort['PATNO'] = df_cohort['PATNO'].astype(str)
df_cohort['COHORT'] = df_cohort['COHORT'].astype(str)
mri['PATNO'] = mri['PATNO'].astype(str)

df_cohort['COHORT'] = df_cohort['COHORT'].str.strip()
df_cohort['PATNO'] = df_cohort['PATNO'].str.strip()
pd_patnos = set(df_cohort[df_cohort['COHORT'] == '1']['PATNO'])
mri = mri[mri['PATNO'].isin(pd_patnos)]
print(pd_patnos)

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

# 1. Identify top10 anatomical features by variance
anatomical_features = [
    col for col in mri.columns
    if col.startswith(('lh_','rh_','Left_','Right_'))
       and col not in [
           'lhSurfaceHoles','rhSurfaceHoles',
           'Left_WM_hypointensities','Right_WM_hypointensities',
           'Left_non_WM_hypointensities','Right_non_WM_hypointensities',
           'MaskVol_to_eTIV','BrainSegVol_to_eTIV',
           'fwhm_x','fwhm_y','fwhm_z','fwhm_avg',
           'cjv','cnr','efc','fber','rpve_csf','rpve_gm','rpve_wm',
           'summary_bg_k','summary_bg_mean','snr_total','snr_wm',
           'snr_gm','snr_csf','snrd_total','snrd_wm','snrd_gm','snrd_csf',
           'inu_med','inu_range'
       ]
]
variances = mri[anatomical_features].var().sort_values(ascending=False)
top10 = variances.index[:10].tolist()

# 2. Composite score (not needed for top3 values)
weights = variances[top10].values
weights = weights / weights.sum()
mri['composite_score'] = -(mri[top10] * weights).sum(axis=1)

# 3. K-means clustering for stages
X = StandardScaler().fit_transform(mri[top10])
kmeans = KMeans(n_clusters=3, random_state=42).fit(X)
cluster_means = kmeans.cluster_centers_.mean(axis=1)
order_km = np.argsort(cluster_means)[::-1]
stage_labels = ['early','mid','late']
label_map_km = {idx: stage_labels[i] for i, idx in enumerate(order_km)}
mri['stage_km'] = [label_map_km[label] for label in kmeans.labels_]

# 4. Compute means and top3 per stage
stage_means = mri.groupby('stage_km')[top10].mean()
overall_means = mri[top10].mean()
diff = stage_means.subtract(overall_means, axis=1)

top3_info = {}
for stage in stage_labels:
    abs_dev = diff.loc[stage].abs()
    top3 = abs_dev.sort_values(ascending=False).index[:3].tolist()
    top3_info[stage] = [
        {
            'feature': feat,
            'stage_mean': stage_means.loc[stage, feat],
            'overall_mean': overall_means[feat],
            'difference': diff.loc[stage, feat]
        }
        for feat in top3
    ]

# Print results
for stage, feats in top3_info.items():
    print(f"\nStage = {stage}")
    for info in feats:
        print(f"  {info['feature']}: stage mean = {info['stage_mean']:.3f}, "
              f"overall mean = {info['overall_mean']:.3f}, "
              f"difference = {info['difference']:.3f}")

import numpy as np
import pandas as pd

# top3_info from previous step, mri DataFrame has 'stage_km'
# Prepare mapping of stage -> top 3 feature names
top3_features_by_stage = {stage: [f['feature'] for f in feats] for stage, feats in top3_info.items()}
stage_labels = ['early', 'mid', 'late']
stage_to_idx = {s: i for i, s in enumerate(stage_labels)}

# Initialize tensor for all subjects (N subjects, 3 features, 4 channels)
num_subjects = len(mri)
num_features = 3
channels = 4
encoder_tensor = np.zeros((num_subjects, num_features, channels))

# For each subject
for idx, row in mri.iterrows():
    stage = row['stage_km']
    top3_feats = top3_features_by_stage[stage]
    # Get the feature values for this subject
    feature_values = row[top3_feats].values  # shape (3,)
    # One-hot encode the stage (early/mid/late)
    stage_onehot = np.zeros(3)
    stage_onehot[stage_to_idx[stage]] = 1

    for j in range(3):
        encoder_tensor[idx, j, 0] = feature_values[j]  # Value of feature
        encoder_tensor[idx, j, 1:] = stage_onehot      # Channels 1-3: stage one-hot

print(encoder_tensor.shape)  # Should be (1492, 3, 4)

"""357: Number of subjects (or patients). Each subject gets their own "block" in the tensor.

3: The number of features per subject (often the "top 3" MRI features determined for that subject's stage).

4: The number of channels per feature. In your encoder coding, this is typically:

channel 0: The actual value of the MRI feature for that subject.

channels 1, 2, 3: A one-hot encoding of the disease stage (early, mid, or late) for that subject (only one of these three elements is 1, the other two are 0).
"""

np.save('encoder_tensor_mri.npy', encoder_tensor)

mri.columns

columns_list = mri.columns.tolist()
print(columns_list)



